import logging
from typing import List, Optional, Dict, Any
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi import HTTPException, status

from models.database_models import FileUpload

logger = logging.getLogger(__name__)

class UploadsService:
    async def create_upload_record(
        self,
        original_filename: str,
        s3_key: str,
        s3_url: str,
        file_size: int,
        content_type: str,
        file_content: Optional[str] = None,
        score: float = 0.0,
        folder_path: Optional[str] = None,
        user_id: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None,
        upload_ip: Optional[str] = None,
        upload_status: str = "success",
        db: AsyncSession = None
    ) -> Dict[str, Any]:
        """Create a new file upload record"""
        upload_record = FileUpload(
            original_filename=original_filename,
            s3_key=s3_key,
            s3_url=s3_url,
            file_size=file_size,
            content_type=content_type,
            file_content=file_content,
            score=score,
            folder_path=folder_path,
            user_id=user_id,
            metadata=metadata,
            upload_ip=upload_ip,
            upload_status=upload_status
        )
        
        db.add(upload_record)
        await db.commit()
        await db.refresh(upload_record)
        
        return {
            "id": upload_record.id,
            "original_filename": upload_record.original_filename,
            "s3_key": upload_record.s3_key,
            "s3_url": upload_record.s3_url,
            "file_size": upload_record.file_size,
            "content_type": upload_record.content_type,
            "file_content": upload_record.file_content,
            "score": upload_record.score,
            "folder_path": upload_record.folder_path,
            "user_id": upload_record.user_id,
            "metadata": upload_record.metadata,
            "upload_ip": upload_record.upload_ip,
            "upload_status": upload_record.upload_status,
            "created_at": upload_record.created_at.isoformat(),
            "updated_at": upload_record.updated_at.isoformat()
        }

    async def list_uploads(
        self,
        user_id: Optional[str] = None,
        folder: Optional[str] = None,
        limit: int = 100,
        offset: int = 0,
        db: AsyncSession = None
    ) -> Dict[str, Any]:
        """List file uploads with filtering and pagination"""
        query = select(FileUpload)
        
        if user_id:
            query = query.where(FileUpload.user_id == user_id)
        if folder:
            query = query.where(FileUpload.folder_path == folder)
        
        # Count total
        count_query = query.with_only_columns(func.count()).order_by(None)
        total_count_result = await db.execute(count_query)
        total_count = total_count_result.scalar()
        
        # Get paginated results
        query = query.order_by(FileUpload.created_at.desc()).offset(offset).limit(limit)
        result = await db.execute(query)
        uploads = result.scalars().all()
        
        records = [
            {
                "id": upload.id,
                "original_filename": upload.original_filename,
                "s3_key": upload.s3_key,
                "s3_url": upload.s3_url,
                "file_size": upload.file_size,
                "content_type": upload.content_type,
                "file_content": upload.file_content,
                "score": upload.score,
                "folder_path": upload.folder_path,
                "user_id": upload.user_id,
                "metadata": upload.metadata,
                "upload_ip": upload.upload_ip,
                "upload_status": upload.upload_status,
                "created_at": upload.created_at.isoformat(),
                "updated_at": upload.updated_at.isoformat()
            } for upload in uploads
        ]
        
        return {
            "records": records,
            "total_count": total_count
        }

    async def get_upload_record(self, s3_key: str, db: AsyncSession = None) -> Optional[Dict[str, Any]]:
        """Get a specific upload record by S3 key"""
        result = await db.execute(
            select(FileUpload).where(FileUpload.s3_key == s3_key)
        )
        upload = result.scalar_one_or_none()
        
        if upload:
            return {
                "id": upload.id,
                "original_filename": upload.original_filename,
                "s3_key": upload.s3_key,
                "s3_url": upload.s3_url,
                "file_size": upload.file_size,
                "content_type": upload.content_type,
                "file_content": upload.file_content,
                "score": upload.score,
                "folder_path": upload.folder_path,
                "user_id": upload.user_id,
                "metadata": upload.metadata,
                "upload_ip": upload.upload_ip,
                "upload_status": upload.upload_status,
                "created_at": upload.created_at.isoformat(),
                "updated_at": upload.updated_at.isoformat()
            }
        return None

    async def delete_upload_record(self, s3_key: str, db: AsyncSession = None) -> bool:
        """Delete an upload record by S3 key"""
        result = await db.execute(
            select(FileUpload).where(FileUpload.s3_key == s3_key)
        )
        upload = result.scalar_one_or_none()
        
        if upload:
            await db.delete(upload)
            await db.commit()
            return True
        return False

# Create global instance
uploads_service = UploadsService()